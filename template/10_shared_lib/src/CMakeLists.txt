set(@OPTION_PROJECT_PREFIX_UPPER_CASE@_TARGET_SHARED_LIB
    @OPTION_PROJECT_PREFIX_UNDER_CASE@_target_shared_lib)
add_library(${@OPTION_PROJECT_PREFIX_UPPER_CASE@_TARGET_SHARED_LIB} SHARED
    ${@OPTION_PROJECT_PREFIX_UPPER_CASE@_PUBLIC_INCLUDE}
    ${@OPTION_PROJECT_PREFIX_UNDER_CASE@_SOURCES}
    ${@OPTION_PROJECT_PREFIX_UNDER_CASE@_HEADERS})

target_link_libraries(${@OPTION_PROJECT_PREFIX_UPPER_CASE@_TARGET_SHARED_LIB} PRIVATE
    ${@OPTION_PROJECT_PREFIX_UPPER_CASE@_COMPILE_OPTIONS})

set(@OPTION_PROJECT_PREFIX_UPPER_CASE@_NAME_SHARED_LIB
    ${PROJECT_NAME})
set_target_properties(${@OPTION_PROJECT_PREFIX_UPPER_CASE@_TARGET_SHARED_LIB} PROPERTIES 
	OUTPUT_NAME 
		${@OPTION_PROJECT_PREFIX_UPPER_CASE@_NAME_SHARED_LIB}
	VERSION 
		${PROJECT_VERSION}
	ARCHIVE_OUTPUT_DIRECTORY
		${CMAKE_BINARY_DIR}/out/shared)

if (UNIX)
    add_custom_command(TARGET ${@OPTION_PROJECT_PREFIX_UPPER_CASE@_TARGET_SHARED_LIB} 
        POST_BUILD
		COMMAND ${CMAKE_OBJCOPY} --only-keep-debug "$<TARGET_FILE:${@OPTION_PROJECT_PREFIX_UPPER_CASE@_TARGET_SHARED_LIB}>" "$<TARGET_FILE:${@OPTION_PROJECT_PREFIX_UPPER_CASE@_TARGET_SHARED_LIB}>.debug"
		COMMAND ${CMAKE_OBJCOPY} --strip-debug --strip-unneeded "$<TARGET_FILE:${@OPTION_PROJECT_PREFIX_UPPER_CASE@_TARGET_SHARED_LIB}>"
		COMMAND ${CMAKE_OBJCOPY} --add-gnu-debuglink="$<TARGET_FILE:${@OPTION_PROJECT_PREFIX_UPPER_CASE@_TARGET_SHARED_LIB}>.debug" "$<TARGET_FILE:${@OPTION_PROJECT_PREFIX_UPPER_CASE@_TARGET_SHARED_LIB}>")
endif ()

